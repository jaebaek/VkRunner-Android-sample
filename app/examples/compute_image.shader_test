#ifndef COMPUTE_IMAGE_SHADER_TEST_H
#define COMPUTE_IMAGE_SHADER_TEST_H
"app/examples/compute_image.shader_test",
R"(
[comment]
// Source code in OpenCL C:

const sampler_t copyImageToBufferSampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_NONE | CLK_FILTER_NEAREST;
__kernel void main(
   __read_only image2d_t inImage,
   __global float4* outDest,
   int inWidth,
   int inHeight)
{
   int x = (int)get_global_id(0);
   int y = (int)get_global_id(1);
   if (x < inWidth && y < inHeight)
   {
       outDest[(y * inWidth) + x] = read_imagef(inImage, copyImageToBufferSampler, (float2)(x, y));
   }
}

// This SPIR-V code was generated by compiling the above code with CLSPV

[compute shader binary]
7230203 10200 70000 41 0 20011 1 20011 115a b000a 5f565053 5f52484b 726f7473
5f656761 66667562 735f7265 61726f74 635f6567 7373616c 0 8000a 5f565053 5f52484b
69726176 656c6261 696f705f 7265746e 73 3000e 0 1 6000f 5 1 6e69616d 0 2 30003 3
78 40047 3 1 0 40047 4 1 1 40047 5 1 2 40047 6 6 10 50048 7 0 23 0 30047 7 2
50048 8 0 23 0 30047 8 2 40047 9 22 0 40047 9 21 0 40047 2 b 1c 40047 a b 19
40047 b 22 1 40047 b 21 0 30047 b 18 40047 c 22 1 40047 c 21 1 40047 d 22 1
40047 d 21 2 40047 e 22 1 40047 e 21 3 30016 f 20 90019 10 f 1 0 0 0 1 0 40020
11 0 10 40017 12 f 4 40020 13 c 12 3001d 6 12 3001e 7 6 40020 14 c 7 40015 15 20
0 3001e 8 15 40020 16 c 8 40020 17 c 15 20013 18 30021 19 18 40017 1a 15 3 40020
1b 1 1a 40020 1c 1 15 20014 1d 40017 1e f 2 2001a 1f 40020 20 0 1f 40020 21 6 1a
3001b 22 10 4002b f 23 0 4002b 15 24 0 4002b 15 25 1 30001 1e 26 4003b 20 9 0
4003b 1b 2 1 40032 15 3 1 40032 15 4 1 40032 15 5 1 60033 1a a 3 4 5 5003b 21 27
6 a 4003b 11 b 0 4003b 14 c c 4003b 16 d c 4003b 16 e c 50036 18 1 0 19 200f8 28
4003d 10 29 b 50041 17 2a d 24 4003d 15 2b 2a 50041 17 2c e 24 4003d 15 2d 2c
50041 1c 2e 2 24 4003d 15 2f 2e 50041 1c 30 2 25 4003d 15 31 30 500b1 1d 32 2f
2b 500b1 1d 33 31 2d 500a7 1d 34 32 33 300f7 35 0 400fa 34 36 35 200f8 36 4003d
1f 37 9 4006f f 38 2f 60052 1e 39 38 26 0 4006f f 3a 31 60052 1e 3b 3a 39 1
50056 22 3c 29 37 70058 12 3d 3c 3b 2 23 50084 15 3e 31 2b 50080 15 3f 3e 2f
60041 13 40 c 24 3f 3003e 40 3d 200f9 35 200f8 35 100fd 10038

[require]
VK_KHR_storage_buffer_storage_class
VK_KHR_variable_pointers

[test]
# image [set:bind] (width, height) format color
#   --> color must be one of rgbw, red, green, or blue
image 1:0 (4, 4) R8G8B8A8_UNORM green

# ssbo [set:bind] subdata [type] [offset] [values ...]
ssbo 1:1 subdata vec4 0 1.0 2.0 3.0 4.0 1.0 2.0 3.0 4.0 1.0 2.0 3.0 4.0 1.0 2.0 3.0 4.0
ssbo 1:2 subdata int 0 4
ssbo 1:3 subdata int 0 4

# *** Sampler related commands ***
#
# 1. Create default sampler
# sampler [set:bind]
# e.g.,
# sampler 0:0
#
# 2. Change filter attributes
# sampler filter [set:bind] [magFilter] [minFilter]
# e.g.,
# sampler filter 0:0 VK_FILTER_NEAREST VK_FILTER_NEAREST
#
# 3. Change mipmap mode
# sampler mipmap [set:bind] [mipmapMode]
# e.g.,
# sampler mipmap 0:0 VK_SAMPLER_MIPMAP_MODE_NEAREST
#
# 4. Change address modes for U, V, and W
# sampler address [set:bind] [addressModeU] [addressModeV] [addressModeW]
# e.g.,
# sampler address 0:0 VK_SAMPLER_ADDRESS_MODE_REPEAT VK_SAMPLER_ADDRESS_MODE_REPEAT VK_SAMPLER_ADDRESS_MODE_REPEAT
#
# 5. Change unnormalizedCoordinates
# sampler norm [set:bind] [normalizedCoordinates]
#   --> normalizedCoordinates must be 0 for unnormalizedCoordinates = VK_TRUE
#                                 and 1 for unnormalizedCoordinates = VK_FALSE
# e.g.,
# sampler norm 0:0 0
#   --> it means setting "unnormalizedCoordinates" attribute as VK_TRUE
# sampler norm 0:0 1
#   --> it means setting "unnormalizedCoordinates" attribute as VK_FALSE
#
# 6. Change level of detail i.e., Lod
# sampler lod [set:bind] [minLod] [maxLod] [mipLodBias]
#   --> minLod, maxLod, and mipLodBias must be float values
# e.g.,
# sampler lod 0:0 0.0 0.0 0.0
#
# 7. Change other attributes
# sampler extra [set:bind] [maxAnisotropy] [compareOp] [borderColor]
# e.g.,
# sampler extra 0:0 1 VK_COMPARE_OP_NEVER VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE

sampler 0:0
sampler filter 0:0 VK_FILTER_NEAREST VK_FILTER_NEAREST
sampler address 0:0 VK_SAMPLER_ADDRESS_MODE_REPEAT VK_SAMPLER_ADDRESS_MODE_REPEAT VK_SAMPLER_ADDRESS_MODE_REPEAT
sampler norm 0:0 0

compute 4 1 1

# probe ssbo [tyep] [set:bind] [offset] == [values ...]
probe ssbo vec4 1:1 0 == 1.0 0.0 0.0 1.0
)",
#endif
