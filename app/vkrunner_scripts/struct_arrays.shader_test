#ifndef STRUCT_ARRAYS_SHADER_TEST_H
#define STRUCT_ARRAYS_SHADER_TEST_H
"app/vkrunner_scripts/struct_arrays.shader_test",
R"(
[comment]
Source code in OpenCL C:

#define NUM_ARRAY_ELEMENTS 18

typedef struct {
    float   arr[NUM_ARRAY_ELEMENTS];
} FloatArrayWrapper;

void FillOneElement(__global FloatArrayWrapper* outWrapper,
                    unsigned int wrapperIndex,
                    unsigned int elementIndex)
{
    __global FloatArrayWrapper* wrapper = &outWrapper[wrapperIndex];

    wrapper->arr[elementIndex] = sizeof(FloatArrayWrapper) * 10000.0f
                                 + wrapperIndex * 100.0f
                                 + (float) elementIndex;
}

__kernel void FillStructArray(__global FloatArrayWrapper* outWrapper)
{
    unsigned int x = get_global_id(0);

    for (unsigned int i = 0; i < NUM_ARRAY_ELEMENTS; ++i)
    {
        FillOneElement(outWrapper, x, i);
    }
}

The following SPIR-V code was generated by CLSPV with -cl-opt-disable option.
GIT_COMMIT = 8638849b2167fcba90dbff0ee4cfe7dbf0380d24

[compute shader binary]
7230203 10200 70000 4f 0 20011 1 20011 115a b000a 5f565053 5f52484b 726f7473
5f656761 66667562 735f7265 61726f74 635f6567 7373616c 0 8000a 5f565053 5f52484b
69726176 656c6261 696f705f 7265746e 73 6000b 1 4c534c47 6474732e 3035342e 0
3000e 0 1 6000f 5 2 6e69616d 0 3 30003 3 78 40047 4 1 0 40047 5 1 1 40047 6 1 2
50048 7 0 23 0 40047 8 6 48 50048 9 0 23 0 30047 9 2 40047 3 b 1c 40047 a b 19
40047 b 22 0 40047 b 21 0 40047 c 6 4 40015 d 20 0 30016 e 20 4002b d f 12 4001c
c e f 3001e 7 c 3001d 8 7 3001e 9 8 40020 10 c 9 20013 11 30021 12 11 40020 13 c
7 40017 14 d 3 40020 15 1 14 40020 16 1 d 60021 17 11 13 d d 40020 18 c e 40020
19 6 14 4002b d 1a 0 4002b d 1b 1 4002b d 1c 2 4002b d 1d 3 4002b d 1e 4 4002b d
1f 5 4002b d 20 6 4002b d 21 7 4002b d 22 8 4002b d 23 9 4002b d 24 a 4002b d 25
b 4002b d 26 c 4002b d 27 d 4002b d 28 e 4002b d 29 f 4002b d 2a 10 4002b d 2b
11 4002b e 2c 42c80000 4002b e 2d 492fc800 4003b 15 3 1 40032 d 4 1 40032 d 5 1
40032 d 6 1 60033 14 a 4 5 6 5003b 19 2e 6 a 4003b 10 b c 50036 11 2f 0 17 30037
13 30 30037 d 31 30037 d 32 200f8 33 40070 e 34 31 8000c e 35 1 32 34 2c 2d
40070 e 36 32 50081 e 37 35 36 80041 18 38 b 1a 31 1a 32 3003e 38 37 100fd 10038
50036 11 2 0 12 200f8 39 60041 13 3a b 1a 1a 50041 16 3b 3 1a 4003d d 3c 3b
70039 11 3d 2f 3a 3c 1a 70039 11 3e 2f 3a 3c 1b 70039 11 3f 2f 3a 3c 1c 70039 11
40 2f 3a 3c 1d 70039 11 41 2f 3a 3c 1e 70039 11 42 2f 3a 3c 1f 70039 11 43 2f 3a
3c 20 70039 11 44 2f 3a 3c 21 70039 11 45 2f 3a 3c 22 70039 11 46 2f 3a 3c 23
70039 11 47 2f 3a 3c 24 70039 11 48 2f 3a 3c 25 70039 11 49 2f 3a 3c 26 70039 11
4a 2f 3a 3c 27 70039 11 4b 2f 3a 3c 28 70039 11 4c 2f 3a 3c 29 70039 11 4d 2f 3a
3c 2a 70039 11 4e 2f 3a 3c 2b 100fd 10038

[require]
VK_KHR_storage_buffer_storage_class
VK_KHR_variable_pointers

[test]
# ssbo [bind] subdata [type] [offset] [values ...]
ssbo 0 subdata float   0  1.0  2.0  3.0  4.0  5.0  6.0  7.0  8.0  9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0
ssbo 0 subdata float  72 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.0 30.0 31.0 32.0 33.0 34.0 35.0 36.0
ssbo 0 subdata float 144 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0

compute 3 1 1

# probe ssbo [type] [bind] [offset] == [values ...]
probe ssbo float 0   0 < 10000.001
probe ssbo float 0   1 < 10001.001
probe ssbo float 0  72 < 10100.001
probe ssbo float 0  73 < 10101.001
probe ssbo float 0 144 < 10200.001
probe ssbo float 0 145 < 10201.001

probe ssbo float 0   0 >  9999.999
probe ssbo float 0   1 > 10000.999
probe ssbo float 0  72 > 10099.999
probe ssbo float 0  73 > 10100.999
probe ssbo float 0 144 > 10199.999
probe ssbo float 0 145 > 10200.999
)",
#endif
