#ifndef COMPUTE_IMAGE_SHADER_TEST_H
#define COMPUTE_IMAGE_SHADER_TEST_H
"app/vkrunner_scripts/compute_image.shader_test",
R"(
[comment]
// Source code in OpenCL C:

const sampler_t sampler =
CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_REPEAT | CLK_FILTER_NEAREST;

kernel void main(global float* out,
                 global float* in,
                 __read_only image2d_t inImage) {
  uint i = get_global_id(0);
  float sum = 0.0f;
  for (int j = 0; j < 4;++j)
    sum += read_imagef(inImage, sampler, (float2)((float)i, (float)i))[j];
  out[i] = in[i] + 100.0f * sum;
}

// This SPIR-V code was generated by compiling the above code with CLSPV

[compute shader binary]
7230203 10200 70000 43 0 20011 1 20011 115a b000a 5f565053 5f52484b 726f7473
5f656761 66667562 735f7265 61726f74 635f6567 7373616c 0 8000a 5f565053 5f52484b
69726176 656c6261 696f705f 7265746e 73 6000b 1 4c534c47 6474732e 3035342e 0
3000e 0 1 6000f 5 2 6e69616d 0 3 30003 3 78 40047 4 1 0 40047 5 1 1 40047 6 1 2
40047 7 6 4 50048 8 0 23 0 30047 8 2 40047 9 22 0 40047 9 21 0 40047 3 b 1c
40047 a b 19 40047 b 22 1 40047 b 21 0 40047 c 22 1 40047 c 21 1 40047 d 22 1
40047 d 21 2 30047 d 18 30016 e 20 40020 f c e 3001d 7 e 3001e 8 7 40020 10 c 8
90019 11 e 1 0 0 0 1 0 40020 12 0 11 40015 13 20 0 20013 14 30021 15 14 40017 16
13 3 40020 17 1 16 40020 18 1 13 40017 19 e 2 40017 1a e 4 2001a 1b 40020 1c 0
1b 40020 1d 6 16 3001b 1e 11 4002b e 1f 0 4002b 13 20 0 30001 19 21 4002b e 22
42c80000 4003b 1c 9 0 4003b 17 3 1 40032 13 4 1 40032 13 5 1 40032 13 6 1 60033
16 a 4 5 6 5003b 1d 23 6 a 4003b 10 b c 4003b 10 c c 4003b 12 d 0 50036 14 2 0
15 200f8 24 4003d 11 25 d 50041 18 26 3 20 4003d 13 27 26 40070 e 28 27 60052 19
29 28 21 0 7004f 19 2a 29 21 0 0 4003d 1b 2b 9 50056 1e 2c 25 2b 70058 1a 2d 2c
2a 2 1f 50051 e 2e 2d 0 50081 e 2f 2e 1f 4003d 1b 30 9 50056 1e 31 25 30 70058
1a 32 31 2a 2 1f 50051 e 33 32 1 50081 e 34 2f 33 4003d 1b 35 9 50056 1e 36 25
35 70058 1a 37 36 2a 2 1f 50051 e 38 37 2 50081 e 39 34 38 4003d 1b 3a 9 50056
1e 3b 25 3a 70058 1a 3c 3b 2a 2 1f 50051 e 3d 3c 3 50081 e 3e 39 3d 60041 f 3f c
20 27 4003d e 40 3f 8000c e 41 1 32 3e 22 40 60041 f 42 b 20 27 3003e 42 41
100fd 10038

[require]
VK_KHR_storage_buffer_storage_class
VK_KHR_variable_pointers

[test]
# ssbo [set:bind] subdata [type] [offset] [values ...]
ssbo 1:0 subdata float 0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0
ssbo 1:1 subdata float 0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0

# sampler
# combined
# image
# image storage
# utex
# stex
# ubo  --> uniform buffer
# ssbo --> storage buffer

# image set:bind (width, height) format color
# "color": rgbw or a single color e.g., 0xff0000ff for R8G8B8A8_UNORM
image 1:2 (8, 8) R8G8B8A8_UNORM rgbw

# combined set:bind (width, height) format color
# image storage set:bind (width, height) format color

# Setup sampler
# "combined" can be setup in this way too
sampler 0:0

# sampler filter [set:bind] [magFilter] [minFilter]
sampler filter 0:0 VK_FILTER_NEAREST VK_FILTER_NEAREST

# sampler mipmap [set:bind] [mipmapMode]
sampler mipmap 0:0 VK_SAMPLER_MIPMAP_MODE_NEAREST

# sampler address [set:bind] [addressModeU] [addressModeV] [addressModeW]
sampler address 0:0 VK_SAMPLER_ADDRESS_MODE_REPEAT VK_SAMPLER_ADDRESS_MODE_REPEAT VK_SAMPLER_ADDRESS_MODE_REPEAT

# sampler norm [set:bind] [normalizedCoordinates]
# normalizedCoordinates: 0 for unnormalizedCoordinates = VK_TRUE
#                        1 for unnormalizedCoordinates = VK_FALSE
sampler norm 0:0 0

# sampler lod [set:bind] [minLod] [maxLod] [mipLodBias]
# minLod, maxLod, mipLodBias are float values
#
# sampler lod 0:0 0.0 0.0 0.0

# sampler extra [set:bind] [maxAnisotropy] [compareOp] [borderColor]
#
# sampler extra 0:0 1 VK_COMPARE_OP_NEVER VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE

compute 8 1 1

# probe ssbo [tyep] [set:bind] [offset] == [values ...]
probe ssbo float 1:0 0 == 301.0
probe ssbo float 1:1 0 == 101.0
)",
#endif
